1.git init  本地目录初始化
2.git add . 提交本地文件到git 暂存区(git add 指定文件)
3.git commit -m "备注信息" (git push --set-upstream origin 分支名 （首次提交远端关联分支）git push origin 分支名 )   将暂存文件提交到git仓库
4.git status  查看仓库状态     
5.git diff 文件名  查看具体修改内容
6.git log 日志查看  （简化  git log --pretty=oneline） 注意commit id 帮助回退和回复文件  git log --graph 查看分支合并图
7.git reset --hard HEAD^       (回退命令，HEAD表示当前版本，^表示上一个版本，^^表示上上个，HEAD~100简化方式)
8.git reset --hard ‘commit id’ 回档到指定版本
9.git reflog 查看命令使用记录
10. 可多次git add 在执行 git commit
11.git checkout -- file   撤销修改，还原误删除   (工作区撤销到版本库状态，缓存区撤销到缓存初始状态)
12.git reset HEAD <file> (git add <file>,之后也可以撤销当前修改)
13.rm <file> 删除工作区文件  git rm <file> git commit -m "备注"  删除库中文件
14.git remote add origin git@server-name:path/repo-name.git 关联远程仓库(git push -u origin master第一次推送master分支,此后,使用命令git push origin master)
15.git checkout -b 分支名 (分支创建并切换)   == git switch -c 分支名           git branch 分支名+git checkout 分支名
16.git branch 查看当前分支   git checkout 分支名(切换分支)
17.git merge 被合并分支名 (用于合并指定分支到当前分支)
18.git merge --no-ff -m "merge with no-ff" 分支名   普通模式的分支合并
19.git stash 暂存目前工作  
20. git stash apply 回复当前stash ; git stash drop 进一步删除stash /  git stash pop / 回复指定stash：git stash apply stash@{0}
21.git cherry-pick 4c805e2 复制指定文件到其他分支
22. git pull 将最新提交抓取下来，与本地合并之后，继续提交（当同时push时发生错误）